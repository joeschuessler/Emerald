{"type":"group","name":"EmeraldMapper","enabled":true,"items":[{"type":"function","name":"onInstall","enabled":true,"code":"let emerald = client.emerald\nvar mapper = emerald.mapper = {\n  name:'EmeraldMapper',\n  version:'0.0.1',\n  rooms: {},\n  areas: {}\n};\n\nif (get_variable('emerald_mapper_roomweights')) {\n  mapper.roomWeights = JSON.parse(get_variable('emerald_mapper_roomweights')) \n} else {\n  mapper.roomWeights = {\n    931: 999, //prime seren\n    1337: 999, //prime glom\n    4136: 999, //prime mag\n    4555: 999, //celestia\n    4607: 999, //nil\n    4710: 999, //etherseren\n    4847: 999, //etherglom,\n    4865: 999, //earth\n    11152: 999, //prime halli\n    11401: 999, //prime gaudi\n    19519: 999, //continuum\n    19526: 999, //vortex\n    19663: 999, //fire\n    19765: 999 //air\n  }\n}\n\nmapper.getArea = (vnum) => {\n  return mapper.areas[mapper.rooms[vnum].area];\n}\n\nmapper.scentGo = (name, roomName) => {\n  let rooms = mapper.rooms;\n  let foundRoom = false;\n  for (const r of Object.keys(rooms)) {\n    if (rooms[r].title.toLowerCase() == roomName.toLowerCase()) {\n      emerald.debugmsg(JSON.stringify(rooms[r],null,2))\n      emerald.note.clear();\n      emerald.note.build('[Mapper]:','silver','seagreen',' ','silver','');\n      if (emerald.plugins['factions'] && emerald.factions.names[name]) {\n        emerald.note.build(name,emerald.factions.colors[emerald.factions.names[name]],'',': ',emerald.configs.ui_white,'');\n      } else {\n        emerald.note.build(`${name}: `,emerald.configs.ui_white,'');\n      }\n      emerald.note.build(`${rooms[r].title} `,emerald.configs.ui_white,'');\n      emerald.note.build('[',emerald.configs.ui_white,'',`«path track ${r}»v${r}`,emerald.configs.ui_green,'',']',emerald.configs.ui_white,'');\n      emerald.note.display();\n      if (emerald.flags.get('scentgo') && name.toLowerCase() == get_variable('emerald_mapper_scenttarget')) {\n        emerald.debugmsg('scenttarget found');\n        send_command(`path track ${r}`);\n        set_variable('emerald_mapper_scenttarget','');\n      }\n      foundRoom = true;\n    }\n    if (foundRoom) break;\n  }\n}\n\nmapper.findRoom = (roomName) => {\n  //let rooms = mapper.mapxml.querySelectorAll(\"room\");\n  let rooms = mapper.rooms;\n  emerald.note.clear();\n  emerald.note.build('[Mapper]:','silver','seagreen',' ','silver','');\n  emerald.note.build(`Scanning ${Object.keys(rooms).length} rooms for \"`,emerald.configs.ui_white,'');\n  emerald.note.build(roomName, emerald.configs.ui_green, '', '\"...',emerald.configs.ui_white,'');\n  emerald.note.display();\n  let foundRooms = 0;\n  for (const r of Object.keys(rooms)) {\n    if (rooms[r].title.toLowerCase().includes(roomName.toLowerCase())) {\n      let area = mapper.getArea(r);\n      emerald.note.clear();\n      emerald.note.build('[Mapper]:','silver','seagreen',' [','silver','');\n      emerald.note.build(`«path track ${r}»v${r}`,emerald.configs.ui_green,'',']: ',emerald.configs.ui_white,'');\n      emerald.note.build(rooms[r].title,emerald.configs.ui_white,'');\n      emerald.note.build(' [',emerald.configs.ui_blue,'', area,emerald.configs.ui_green,'',']',emerald.configs.ui_blue,'');\n      emerald.note.display();\n      foundRooms++;\n    }\n  }\n  if (foundRooms == 0) {\n    emerald.emnote('ROOM NOT FOUND!','Mapper');\n    emerald.note.clear();\n  } else {\n    emerald.emnote(`Found ${foundRooms} matching rooms.`,'Mapper');\n  }\n}\n\nmapper.saveRoomWeights = () => {\n  set_variable('emerald_mapper_roomweights',JSON.stringify(mapper.roomWeights));\n}\n\nmapper.setRoomWeight = (vnum, value) => {\n  mapper.roomWeights[vnum] = value;\n  mapper.saveRoomWeights();\n}\n\nmapper.getPath = (origin, dest) => {\n  let r = mapper.mapxml.querySelector(`room#${origin}`)\n}\n\nmapper.onPrompt = () => {\n  reflex_disable(reflex_find_by_name('trigger','emerald_mapper_scent'));\n}\n\nemerald.plugins['mapper'] = mapper;\nmapper.saveRoomWeights();\nrun_function('loadMap','','EmeraldMapper');\nclient.emerald.emnote(`${mapper.name} v${mapper.version} initialised.`);"},{"type":"function","name":"loadMap","enabled":true,"code":"let emerald = client.emerald;\nlet mapper = emerald.mapper;\n//Load and parse map\nemerald.emnote('Cartographing the Basin of Life...', 'Mapper');\n\nfetch('https://www.lusternia.com/maps/map.xml')\n.then(res => {\n  if (!res.ok) {\n    emerald.emnote('Error retrieving master map.', 'Mapper');\n  }\n  return res.text();\n})\n.then(mapText => {\n  let t = String(mapText);\n  let parser = new DOMParser();\n  mapper.mapxml = parser.parseFromString(t, \"text/xml\");\n})\n.then(() => {\n  let xmlareas = mapper.mapxml.getElementsByTagName(\"area\");\n  for (let a of xmlareas){\n    mapper.areas[a.getAttribute('id')] = a.getAttribute('name');\n  }\n  let xmlrooms = mapper.mapxml.getElementsByTagName(\"room\");\n  for (let r of xmlrooms) {\n    mapper.rooms[r.getAttribute('id')] = {\n      area: r.getAttribute('area'),\n      title: r.getAttribute('title'),\n      exits: {},\n      weight: mapper.roomWeights[r.id] ? mapper.roomWeights[r.id] : 1\n    };\n    for (let c of r.children) {\n      if (c.tagName === \"exit\") {\n        let dir = c.getAttribute('direction');\n        mapper.rooms[r.id].exits[dir] = {target: c.getAttribute('target')};\n        if (c.getAttribute('tgarea') !== null) {mapper.rooms[r.id].exits[dir][\"tgarea\"] = c.getAttribute('tgarea')}\n      }\n    }\n  }\n  emerald.emnote(`Successfully mapped ${Object.keys(mapper.rooms).length} rooms in ${Object.keys(mapper.areas).length} areas.`,'Mapper');\n})\n.then(() => {\n  delete mapper.mapxml;\n})\n.catch(error => {\n  emerald.emnote(`Error parsing master map: ${error}`,'Mapper');\n});"},{"type":"function","name":"onUninstall","enabled":true,"code":"// Place any code here you'd like to autorun when the package is uninstalled"},{"type":"group","name":"MapGo","enabled":true,"items":[{"type":"trigger","name":"emerald_mapper_magicmapstart","enabled":true,"actions":[{"type":"enable","enabled":true,"name":"emerald_mapper_magicmap","rtype":"trigger"}],"text":"^As you inscribe the name of \\w+ with a flourish\\, lines crawl across the surface of the map\\, centered upon .+?\\.","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_mapper_magicmap","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (client.emerald.flags.get('mapgo')) {\n  send_command(`path track ${args[1]}`);\n}"}],"text":"^\\-+ Area \\d+\\: .+? \\-+ v(\\d+) \\-+$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_mapper_magicmapend","enabled":true,"actions":[{"type":"disable","enabled":true,"name":"emerald_mapper_magicmap","rtype":"trigger"}],"text":"^(?:\\d+h)?\\,?\\s?(?:\\d+m)?\\,?\\s?(?:\\d+e)?\\,?\\s?(?:\\d+p)?\\s*?(?:\\[(?:N|B|TL|TH|C|SL|SH|K)\\])?\\s?[BelrxsSipdbk]*\\<?\\>?\\-$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.flags.set('mapgo',true,250);\nsend_command(`inscribe map with ${args[1]}`);"}],"text":"^mg (\\w+)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true}]},{"type":"group","name":"ScentGo","enabled":true,"items":[{"type":"trigger","name":"emerald_mapper_scentstart","enabled":true,"actions":[{"type":"enable","enabled":true,"name":"emerald_mapper_scent","rtype":"trigger"}],"text":"^(?:You scent at the air,|You tilt back your head and inhale deeply)","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_mapper_scent","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\nclient.emerald.mapper.scentGo(args[1],args[2])"}],"text":"^You make out the scent of (\\w+) coming from (.+?)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_mapper_scentend","enabled":true,"actions":[{"type":"disable","enabled":true,"name":"emerald_mapper_scent","rtype":"trigger"}],"text":"^(?:\\d+h)?\\,?\\s?(?:\\d+m)?\\,?\\s?(?:\\d+e)?\\,?\\s?(?:\\d+p)?\\s*?(?:\\[(?:N|B|TL|TH|C|SL|SH|K)\\])?\\s?[BelrxsSipdbk]*\\<?\\>?\\-$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"set_variable('emerald_mapper_scenttarget', get_variable('target'));\nclient.emerald.flags.set('scentgo',true,250);\nsend_command('scent');"}],"text":"^stg$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"set_variable('emerald_mapper_scenttarget', args[1]);\nclient.emerald.flags.set('scentgo',true,250)\nsend_command('scent')"}],"text":"^sg (\\w+)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true}]},{"type":"group","name":"Sense","enabled":true,"items":[{"type":"function","name":"meldSense","enabled":true,"code":"/*aerocast sense\nYou reach out and sense who stands within your demesne:\nMachlana (strangely silent swampland)\nFerelith (a gently glowing library)\nEiselle (a gently glowing library)\nFaragan (outside the observatory)\nJaye (outside the observatory)\nNuminous (outside the observatory)*/"},{"type":"trigger","name":"emerald_mapper_callenemies","enabled":false,"actions":[],"text":"^(?:\\d+h)?\\,?\\s?(?:\\d+m)?\\,?\\s?(?:\\d+e)?\\,?\\s?(?:\\d+p)?\\s*?(?:\\[(?:N|B|TL|TH|C|SL|SH|K)\\])?\\s?[BelrxsSipdbk]*\\<?\\>?\\-$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.mapper.findRoom(args[1]);"}],"text":"^findroom (.+?)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"send_command(`path track ${args[1]}`);"}],"text":"^go (\\d+)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true}],"description":"Mapper and pathfinding module"}