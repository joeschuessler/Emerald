{"type":"group","name":"EmeraldFactions","enabled":true,"items":[{"type":"function","name":"onInstall","enabled":true,"code":"let emerald = client.emerald;\nlet factions = emerald.factions = {\n  name: 'EmeraldFactions',\n  version: '0.1.0'\n};\nset_variable('emerald_factions_version', factions.version);\n\nfactions.announceNames = true;\nfactions.colors = {\n  'Serenwilde': 'seagreen',\n  'Glomdoring': 'darkviolet',\n  'Celest': 'lightyellow',\n  'Magnagora': 'crimson',\n  'Hallifax': 'dodgerblue',\n  'Gaudiguch': 'orange',\n  'Divine': 'yellow',\n  '(none)': 'olivedrab'\n};\nfactions.names = get_variable('emerald_factions_names') ? JSON.parse(get_variable('emerald_factions_names')) : {};\n\nfactions.save = () => {\n  set_variable('emerald_factions_colors',JSON.stringify(factions.colors));\n  set_variable('emerald_factions_names',JSON.stringify(factions.names));\n}\nfactions.add = (name) => {\n  fetch(`https://api.lusternia.com/characters/${name}.json`)\n  .then(res => {\n    return res.json();\n  }).then(data => {\n    if (String(data).includes(' was not found')) {\n      client.emerald.emnote(`${name} was not found. Removing from name list.`);\n      delete factions.names[name];\n    } else {\n      let org;\n      if (['Spindle','Skein','Bobbins'].includes(name) || data.level == 'Infinite') {\n        org = 'Divine';\n      } else {\n        org = data.faction.charAt(0).toUpperCase() + data.faction.substr(1).toLowerCase();\n      }\n      factions.names[data.name] = org;\n      client.emerald.emnote(`${data.name} is of ${org}`, 'Factions');\n      factions.save();\n    }\n  })\n}\n\nfactions.clearNames = () => {\n  emerald.factions.namesEnteringArea = [];\n  emerald.factions.namesLeavingArea = [];\n  emerald.factions.namesEnteringMeld = []; \n  emerald.factions.namesLeavingMeld = [];\n}\n\nfactions.callNames = () => {\n  let nameArrays = [emerald.factions.namesEnteringArea,\n                  emerald.factions.namesLeavingArea,\n                  emerald.factions.namesEnteringMeld,\n                  emerald.factions.namesLeavingMeld];\n  let a;\n  let who = '', aux = 'has', action = '';\n  let ann = get_variable('emerald_config_announce');\n  if (emerald.factions.announceNames) {\n    for (let x=0;x <=3;x++) {\n      a = nameArrays[x];\n      if (a.length > 1) aux = 'have';\n      while (a.length > 0) {\n        if (who=='') {\n          who += a.pop();\n        } else {\n          if (a.length > 1) {\n            who += `, ${a.pop()}`;\n          } else {\n            who += ` and ${a.pop()}`;\n          }\n        }\n      }\n      switch (x) {\n        case 0:\n          action = `entered ${emerald.plugins['mapper'] ? emerald.mapper.currentArea : 'the area.'}`\n          break;\n        case 1:\n          action = `left ${emerald.plugins['mapper'] ? emerald.mapper.currentArea : 'the area.'}`\n          break;\n        case 2:\n          action = `entered my demesne`\n          break;\n        case 3:\n          action = `left my demesne`\n          break;\n      }\n      if (who != '') send_command(`${ann} ${who} ${aux} ${action}`);\n      a = [];\n      who = ''\n    }\n  }\n}\n\nfactions.onPrompt = () => {\n  factions.callNames();\n  factions.clearNames();\n}\n\nemerald.plugins['factions'] = factions;\nclient.emerald.emnote(`${factions.name} v${factions.version} initialised.`);\nif (!emerald.factions.enemies) {\n  get_variable('emerald_factions_enemies')\n    ? emerald.factions.enemies = JSON.parse(get_variable('emerald_factions_enemies'))\n    : send_command('enemies');\n}\nfactions.clearNames();"},{"type":"function","name":"onUninstall","enabled":true,"code":"// Place any code here you'd like to autorun when the package is uninstalled"},{"type":"function","name":"onLoad","enabled":true,"code":"run_function(\"onInstall\",\"\",\"EmeraldFactions\");"},{"type":"trigger","name":"emerald_factions_names","enabled":true,"actions":[{"type":"script","enabled":true,"script":"const words = [...args[0].matchAll(/\\b(.+?)\\b/gi)];\nwords.forEach(w => {\n  if (Object.prototype.hasOwnProperty.call(client.emerald.factions.names,w[0])) {\n    colorize_current_line(w.index,w[0].length,client.emerald.factions.colors[client.emerald.factions.names[w[0]]])\n  }\n})"}],"text":"^.*?$","matching":"regexp","whole_words":false,"case_sensitive":false},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.factions.add(args[1])"}],"text":"^whois (.+)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"group","name":"Emerald_Factions_NameCapture","enabled":true,"items":[{"type":"trigger","name":"emerald_factions_whostart","enabled":true,"actions":[{"type":"enable","enabled":true,"name":"emerald_factions_whocapture","rtype":"trigger"}],"text":"^You sense the following people\\:$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_factions_whocapture","enabled":false,"actions":[{"type":"script","enabled":true,"script":"if (!client.emerald.factions.names[args[1]]) client.emerald.factions.add(args[1]);"}],"text":"^\\s+(.+)\\s-\\s.+(?:\\(.+?\\))?$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_factions_whoend","enabled":true,"actions":[{"type":"disable","enabled":true,"name":"emerald_factions_whocapture","rtype":"trigger"}],"text":"^\\(\\*\\) Currently\\, there is|are \\d+ Lusternians?(?:\\, \\d+ of which are hidden from you)?\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"send_command(`whois ${args[1]}`);"}],"text":"^The Portal of Fate flashes as (\\w+) steps through\\, now ready to begin a fresh life in Lusternia\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"group","name":"Enemies","enabled":true,"items":[{"type":"trigger","name":"emerald_factions_enemiesstart","enabled":true,"actions":[{"type":"enable","enabled":true,"name":"emerald_factions_enemies","rtype":"trigger"},{"type":"script","enabled":true,"script":"client.emerald.factions.enemies = [];"}],"text":"^You consider the following adventurers your enemies\\:$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_factions_enemies","enabled":false,"actions":[{"type":"script","enabled":true,"script":"client.emerald.factions.enemies.push(args[1]);"}],"text":"^(\\w+) is an enemy\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_factions_enemiesend","enabled":true,"actions":[{"type":"disable","enabled":true,"name":"emerald_factions_enemies","rtype":"trigger"},{"type":"script","enabled":true,"script":"set_variable('emerald_factions_enemies', JSON.stringify(client.emerald.factions.enemies))"}],"text":"^\\- \\d+ people\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.factions.announceNames = args[1] == 'on';\nclient.emerald.emnote(`${args[1]=='on'?'A':'Not a'}nnouncing names.`,'Factions');"}],"text":"^ann (on|off)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"group","name":"Watch","enabled":true,"items":[{"type":"trigger","name":"emerald_factions_areawatch","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (client.emerald.factions.enemies.includes(args[1])) {\n  args[2] == 'entered'\n    ? client.emerald.factions.namesEnteringArea.push(args[1])\n    : client.emerald.factions.namesLeavingArea.push(args[1]);\n}"}],"text":"^(\\w+) has (entered|left) the area\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_factions_meldwatch","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (client.emerald.factions.enemies.includes(args[1])) {\n  args[2] == 'enters'\n    ? client.emerald.factions.namesEnteringMeld.push(args[1])\n    : client.emerald.factions.namesLeavingMeld.push(args[1]);\n}"}],"text":"^(\\w+) (enters|leaves) your demesne\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_factions_callnames","enabled":true,"actions":[{"type":"function","enabled":true,"fn":"announceNames"}],"text":"^(?:\\d+h)?\\,?\\s?(?:\\d+m)?\\,?\\s?(?:\\d+e)?\\,?\\s?(?:\\d+p)?\\,?\\s*?(?:\\[(?:N|B|TL|TH|C|SL|SH|K)\\])?\\s?(?:\\d+)\\%ef\\s?[BesSilrxpdbk]*(<>)?\\-$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.factions.namesEnteringArea = [];\nclient.emerald.factions.namesLeavingArea = []\nclient.emerald.factions.namesEnteringMeld = []\nclient.emerald.factions.namesLeavingMeld = []\nclient.emerald.emnote('names cleared')"}],"text":"clearnames","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true}]},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let en = JSON.parse(get_variable('emerald_factions_enemies'));\nlet cmd = 'enemy ';\nen.forEach(e => cmd += `${e} `);\nsend_command(cmd);"}],"text":"^In a moment of forgiveness\\, you declare that you have no enemies\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}],"description":"Name highlighting based on org"}