{"type":"group","name":"EmeraldCore","enabled":true,"items":[{"type":"function","name":"emeraldSplash","enabled":true,"code":"let emerald = client.emerald;\nemerald.note.clear();\nemerald.note.build('\\n                             #############\\n','seagreen');\nemerald.note.build('                  ##############        ##\\n','seagreen');\nemerald.note.build('            #########                  ###\\n','seagreen');\nemerald.note.build('           ###                        ####\\n','seagreen');\nemerald.note.build('           ## #                      ## # \\n','seagreen');\nemerald.note.build('           ##  #                    ##  # \\n','seagreen');\nemerald.note.build('           ##   ##                 ###  # \\n','seagreen');\nemerald.note.build('          ##      ##              ###   # \\n','seagreen');\nemerald.note.build('          ##       ##            ###    # \\n','seagreen');\nemerald.note.build('          ##         ##         ###    ## \\n','seagreen');\nemerald.note.build('          ##           ##      ###     ## \\n','seagreen');\nemerald.note.build('         ##              ##   ###      ## \\n','seagreen');\nemerald.note.build('         ##               ## ###       ## \\n','seagreen');\nemerald.note.build('         #                ######      ##  \\n','seagreen');\nemerald.note.build('        ##           ####     #####   ##  \\n','seagreen');\nemerald.note.build('        ##       ####             ######  \\n','seagreen');\nemerald.note.build('        #    ###                    ####  \\n','seagreen');\nemerald.note.build('        #  ##            ############     \\n','seagreen');\nemerald.note.build('        ###    #############              \\n','seagreen');\nemerald.note.build('  \t#########                         \\n','seagreen');\nemerald.note.display();\nemerald.note.clear();"},{"type":"function","name":"onInstall","enabled":true,"code":"function htmlChars(str) {\n\treturn String(str).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/\"/g,'&quot;');\n}\n\nlet nexusVersion = 3\nif (client.version == undefined) nexusVersion = 2;\n\nif (nexusVersion == 3) {\n\n  client.emerald = client.emerald || {\n    name: 'EmeraldCore',\n    version: '0.1.0'\n  };\n  var emerald = client.emerald;\n\n  set_variable('emerald_core_version',emerald.version);\n  emerald.vitals = {};\n  \n  emerald.configs = {\n    'debug': false,\n    'ui_white':'silver',\n    'ui_blue': 'steelblue',\n    'ui_green': 'seagreen',\n    'ui_yellow': 'lemonchiffon',\n    'ui_orange': 'sandybrown',\n    'ui_red': 'lightcoral',\n    armBals: get_variable('emerald_configs_armbals') || 'auto',\n    legBals: get_variable('emerald_configs_legbals') || 'auto',\n    psiBals: get_variable('emerald_configs_psibals') || 'auto',\n    tea: ''\n  };\n\n  set_variable('emerald_configs_armbals',emerald.configs.armBals);\n  emerald.showArmBals = ['on','auto'].includes(emerald.configs.armBals);\n  set_variable('emerald_configs_legbals',emerald.configs.legBals);\n  emerald.showLegBals = ['on','auto'].includes(emerald.configs.legBals)\n  set_variable('emerald_configs_psibals',emerald.configs.psiBals);\n  emerald.showPsiBals = ['on','auto'].includes(emerald.configs.psiBals)\n  \n  emerald.cloaked = false;\n  emerald.dreamform = false;\n  emerald.paused = false;\n  emerald.showKataStance = false;\n  emerald.showEflow = false;\n  emerald.subLocked = false;\n  emerald.superLocked = false;\n  emerald.idLocked = false\n  emerald.beastFollowing = false;\n  \n  let coremodules = ['Note','Vitals','Bals','Flags','Prompt','Queue','Skills'];\n\n  coremodules.forEach(cm => {\n    run_function(`emeraldCoreInit${cm}`,'','EmeraldCore');\n  });\n               \n  \n  emerald.wounds = {};\n  emerald.defs = [];\n\n  // Used to parse and concat a series of strings with various color sets into a single output\n  emerald.html_parse = (...args) => {\n    let fg, bg;\n    let output = '';\n    for (let i = 0; i < args.length; i += 3) {\n      let text = htmlChars(args[i]);\n      let link = '';\n        if (text.startsWith('«') && text.includes('»')) {\n          let a = text.split('»');\n          link = a[0].substring(1);\n          text = a[1];\n        }\n        i+1 < args.length ? fg = args[i+1] : fg = 'grey';\n        i+2 < args.length ? bg = args[i+2] : bg = 'black';\n        if (link != '') output += `<a class=\"mxp.send\" href=\"#\" rel=\"${link}\">`;\n        output += `<span style=\"color:${fg};`;\n        if (bg != 'black') output += ` background-color:${bg};`;\n        output += `\">${text}</span>`;\n        if (link != '') output += '</a>';\n    }\n    return output;\n  };\n  \n  // Outputs an Emerald system notice using html\n  emerald.emnote = (str, tag='Emerald') => {\n    emerald.note.clear();\n    emerald.note.build(`[${tag}]:`,'silver','seagreen',' ','silver','',`${str}`,emerald.configs.ui_white,'');\n    emerald.note.display();\n  }\n\n  // Shorthand function for wrapping debug messages in emnote();\n  emerald.debugmsg = (str) => {\n    if (emerald.configs.debug) emerald.emnote(str,'Debugs');\n  }\n\n  run_function('emeraldSplash','','EmeraldCore');\n  emerald.emnote('Emerald Core v'+get_variable('_emerald_core_version')+' initialised.');\n  emerald.plugins = {};\n  ['Bash','Factions','Mapper','Affs','Influence'].forEach(p => {\n    run_function('onInstall','',`Emerald${p}`);\n  });\n} else {\n  /** Handle Nexus 2 client; refer to CrystalNotices\n  *\n  */\n}"},{"type":"function","name":"onUninstall","enabled":true,"code":"// Place any code here you'd like to autorun when the package is uninstalled"},{"type":"function","name":"onLoad","enabled":true,"code":"run_function(\"onInstall\",\"\",\"EmeraldCore\");"},{"type":"function","name":"onGMCP","enabled":true,"code":"if (args.gmcp_method == \"Char.Vitals\") {\n\n  var emerald = client.emerald\n\n  emerald.vitals.awp = to_number(args.gmcp_args.awp);\n  emerald.vitals.maxawp = to_number(args.gmcp_args.maxawp);\n  if (args.gmcp_args.stance) emerald.vitals.stance = args.gmcp_args.stance\n  for (const s of [\"hp\",\"mp\",\"ego\",\"pow\",\"xp\",\"essence\",\"awp\"]){\n    //save prev\n    emerald.vitals[\"prev\"+s] = emerald.vitals[s];\n    //set current\n    emerald.vitals[s] = 0 || to_number(args.gmcp_args[s]);\n    //calc diff\n    emerald.vitals[\"diff\"+s] = emerald.vitals[s] - emerald.vitals[\"prev\"+s] || 0;\n    //set max\n    if (!([\"essence\",\"xp\"].includes(s))) {\n      emerald.vitals[\"max\"+s] = to_number(args.gmcp_args[\"max\"+s]);\n    }\n    //calc percent\n    emerald.vitals[\"pct\"+s] = emerald.vitals[s]/emerald.vitals[\"max\"+s]*100;\n  }\n  emerald.vitals.preveflow = emerald.vitals.eflow;\n  emerald.vitals.eflow = to_number(args.gmcp_args.enigmaticflow);\n  emerald.vitals.diffeflow = emerald.vitals.eflow - emerald.vitals.preveflow || 0;\n\n  emerald.bals.B = to_number(args.gmcp_args.beastbal) == 1;\n  emerald.bals.eq = to_number(args.gmcp_args.equilibrium) == 1;\n  emerald.bals.la = to_number(args.gmcp_args.left_arm) == 1;\n  emerald.bals.ra = to_number(args.gmcp_args.right_arm) == 1;\n  emerald.bals.ll = to_number(args.gmcp_args.left_leg) == 1;\n  emerald.bals.rl = to_number(args.gmcp_args.right_leg) == 1;\n  emerald.bals.x = to_number(args.gmcp_args.balance) == 1;\n  emerald.bals.s = to_number(args.gmcp_args.psisub);\n  emerald.bals.S = to_number(args.gmcp_args.psisuper);\n  emerald.bals.i = to_number(args.gmcp_args.psiid);\n  emerald.bals.ef = to_number(args.gmcp_args.eflowbal) == 1;\n  emerald.bals.onbal = emerald.bals.eq && emerald.bals.x && emerald.bals.la && emerald.bals.ra && emerald.bals.ll && emerald.bals.rl && emerald.bals.s != 0 && emerald.bals.S != 0 && emerald.bals.i != 0;\n  for (const b of [\"slush\",\"ice\",\"steam\",\"dust\",\"healing\",\"sparkleberry\",\"scroll\",\"allheale\"]) {\n    emerald.bals[b] = to_number(args.gmcp_args[b]) == 1;\n  }\n  for (const v of [\"blind\",\"deaf\",\"prone\",\"kafe\"]) {\n    emerald.vitals[v] = to_number(args.gmcp_args[v]) == 1;\n  }\n}\n\nif (args.gmcp_method == \"Char.Skills.Groups\") {\n  let emerald = client.emerald;\n  let coreSkills = ['aethercraft','arts','beastmastery','combat','discernment','discipline','dramatics','environment','influence','planar'];\n  let toClear = [];\n  emerald.debugmsg('Skills have changed! Updating lists.');\n  let allVars = Object.keys(client.variables().vars);\n  for (let v in allVars) {\n    if (allVars[v].includes('emerald_skills_')) {\n      let s = allVars[v].replace('emerald_skills_','');\n      if (!coreSkills.includes(s)) toClear.push(s);\n    }\n  }\n  while (toClear.length > 0) {\n    delete_variable(`emerald_skills_${toClear.pop()}`);\n  }\n  run_function('emeraldCoreInitSkills','','EmeraldCore');\n  for (let g in args.gmcp_args) {\n    emerald.skills[args.gmcp_args[g].name] = [];\n    send_GMCP('Char.Skills.Get', {group:args.gmcp_args[g].name});\n  }\n  if (emerald.configs.armBals == 'auto') emerald.showArmBals = false;\n  if (emerald.configs.legBals == 'auto') emerald.showLegBals = false;\n  if (emerald.configs.psiBals == 'auto') emerald.showPsiBals = false;\n  emerald.showKataStance = false;\n  emerald.showEflow = false;\n}\n\nif (args.gmcp_method == \"Char.Skills.List\") {\n  let emerald = client.emerald;\n  let skill = args.gmcp_args.group;\n  if (['kata','knighthood'].includes(skill) && ['on','auto'].includes(emerald.configs.armBals)) emerald.showArmBals = true;\n  if (skill == 'kata' && ['on','auto'].includes(emerald.configs.legBals)) emerald.showLegBals = true;\n  if (skill == 'psionics' && ['on','auto'].includes(emerald.configs.psiBals)) emerald.showPsiBals = true;\n  if (skill == 'kata') emerald.showKataStance = true;\n  if (skill == 'zarakido') emerald.showEflow = true;\n  emerald.skills[skill] = args.gmcp_args.list;\n  set_variable(`emerald_skills_${skill}`,args.gmcp_args.list.join('|'));\n}\n\n  //TODO: aethercraft module\n\n"},{"type":"group","name":"Beast Triggers","enabled":true,"items":[{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.beastFollowing = true;"}],"text":"^.*? obediently falls into line behind you\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.beastFollowing = false;"}],"text":"^You reach out through your bond with your beast and dismiss \\w+, sending \\w+ back to the stables\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.beastFollowing = true;"}],"text":"^.*? trots in with head high(?:\\, butting you gently with \\w+ head)?\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Core","enabled":true,"items":[{"type":"trigger","name":"emerald_core_prompt","enabled":true,"actions":[{"type":"gag","enabled":true},{"type":"script","enabled":true,"script":"client.emerald.cloaked = args[1] == '<>'\nclient.emerald.prompt.onPrompt();"}],"text":"^(?:\\d+h)?\\,?\\s?(?:\\d+m)?\\,?\\s?(?:\\d+e)?\\,?\\s?(?:\\d+p)?\\,?\\s*?(?:\\[(?:N|B|TL|TH|C|SL|SH|K)\\])?\\s?(?:\\d+\\%ef)?\\s?[BesSilrxpdbk]*(<>)?\\-$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"function","name":"emeraldCoreInitBals","enabled":true,"code":"let emerald = client.emerald;\nlet bals = emerald.bals = {\n  B: true,\n  eq: true,\n  la: true,\n  ra: true,\n  ll: true,\n  rl: true,\n  x: true,\n  s: true,\n  S: true,\n  i: true,\n  ef: true,\n  onbal: true,\n  brew: true\n};\n"},{"type":"function","name":"emeraldCoreInitFlags","enabled":true,"code":"let emerald = client.emerald;\nlet flags = emerald.flags = {};\n\nflags.set = (name, val, ms) => {\n  if (Object.prototype.hasOwnProperty.call(flags,name)) return;\n  flags[name] = {'value': val, 'id': parseInt(setTimeout(() => {flags.clear(name)},ms))};\n  emerald.debugmsg(`Flag ${flags[name].id} ${name} RAISED: ${val} for ${to_number(ms)/1000} seconds.`);\n}\n\nflags.get = (name) => {\n  if (Object.prototype.hasOwnProperty.call(flags,name)) {\n      emerald.debugmsg(`Flag ${name}: ${JSON.stringify(flags[name])}`)\n      return flags[name].value;\n  } else {\n      return undefined;\n  }\n}\n\nflags.clear = (name) => {\n  if (Object.prototype.hasOwnProperty.call(flags,name)) {\n    emerald.debugmsg(`Flag ${name} CLEARED!!`);\n    clearTimeout(flags[name].id);\n    delete flags[name];\n  }\n}"},{"type":"function","name":"emeraldCoreInitNote","enabled":true,"code":"let emerald = client.emerald\nlet note = emerald.note = {};\n\nvar multinote = '';\n\nnote.clear = () => {\n  multinote = '';\n}\n\nnote.build = (...args) => {\n  multinote += emerald.html_parse(...args);\n}\n\nnote.display = () => {\n  display_html_line(multinote);\n}\n\nnote.pctcolor = (pct) => {\n  let clr;\n  switch (true) {\n    case (pct > 100):\n      clr = emerald.configs.ui_blue;\n      break;\n    case (pct >= 70):\n      clr = emerald.configs.ui_green;\n      break;\n    case (pct >= 30):\n      clr = emerald.configs.ui_yellow;\n      break;\n    case (pct > 0):\n      clr = emerald.configs.ui_red;\n      break;\n    default:\n      clr = emerald.configs.ui_white;\n  }\n  return clr;\n}"},{"type":"function","name":"emeraldCoreInitPrompt","enabled":true,"code":"let emerald = client.emerald\nlet prompt = emerald.prompt = {};\n\nprompt.onPrompt = (gag = false) => {\n  if (!gag && !emerald.flags.get('gagPrompt')) prompt.draw();\n  if (!emerald.paused) {\n    emerald.queue.run();\n    for (const p of Object.keys(emerald.plugins)) {\n      emerald.plugins[p].onPrompt();\n    }\n    /*if (emerald.bals.brew && emerald.configs.brew != 'none' & !emerald.flags.get('tryingbrew')) {\n      send_command(`sip ${emerald.configs.brew}`);\n    }*/\n    if (emerald.showEflow && emerald.bals.ef && emerald.vitals.eflow <= 70 && !emerald.flags.get('tryingtea')) {\n      send_command('sip greentea harmonic');\n      emerald.flags.set('tryingtea',true,500);\n    }\n  }\n  if (emerald.flags.get('gagPrompt')) emerald.flags.clear('gagPrompt');\n}\n\nprompt.draw = () => {\n  emerald.note.clear();\n  emerald.note.build('[',emerald.configs.ui_white,'');\n  emerald.note.build(emerald.vitals.hp,emerald.note.pctcolor(emerald.vitals.pcthp),'','h',emerald.configs.ui_white,'');\n  emerald.note.build('|',emerald.configs.ui_white,'');\n  emerald.note.build(emerald.vitals.mp,emerald.note.pctcolor(emerald.vitals.pctmp),'','m',emerald.configs.ui_white,'');\n  emerald.note.build('|',emerald.configs.ui_white,'');\n  emerald.note.build(emerald.vitals.ego,emerald.note.pctcolor(emerald.vitals.pctego),'','e',emerald.configs.ui_white,'');\n  emerald.note.build('|',emerald.configs.ui_white,'');\n  emerald.note.build(emerald.vitals.pow,emerald.note.pctcolor(emerald.vitals.pctpow),'','p',emerald.configs.ui_white,'');\n  emerald.note.build('] ',emerald.configs.ui_white,'');\n  if (emerald.showKataStance) {\n    emerald.note.build('[',emerald.configs.ui_white,'')\n    switch(emerald.vitals.stance) {\n      case '[n]':\n        emerald.note.build('N',emerald.configs.ui_white,'')\n        break;\n      case '[b]':\n        emerald.note.build('B',emerald.configs.ui_blue,'');\n        break;\n      case '[tl]':\n        emerald.note.build('TL',emerald.configs.ui_green,'');\n        break;\n      case '[th]':\n        emerald.note.build('TH',emerald.configs.ui_green,'');\n        break;\n      case '[c]':\n        emerald.note.build('C',emerald.configs.ui_yellow,'');\n        break;\n      case '[sl]':\n        emerald.note.build('SL',emerald.configs.ui_orange,'');\n        break;\n      case '[sh]':\n        emerald.note.build('SH',emerald.configs.ui_orange,'');\n        break;\n      case '[k]':\n        emerald.note.build('K',emerald.configs.ui_red,'');\n        break;\n    }\n    emerald.note.build('] ',emerald.configs.ui_white,'');\n  }\n  if (emerald.showEflow) {\n    emerald.note.build(emerald.vitals.eflow,emerald.note.pctcolor(emerald.vitals.eflow),'','ef ',emerald.configs.ui_white,'');\n  }\n  \n  let pflags = '';\n  //emerald.bals.B ? pflags += 'B' : pflags += '-';\n  emerald.bals.eq ? pflags += 'e' : pflags += '-';\n  emerald.bals.x ? pflags += 'x' : pflags += '-';\n  if (emerald.showPsiBals) emerald.bals.s > 0 ? pflags += 's' : pflags += '-';\n  if (emerald.showPsiBals) emerald.bals.S > 0 ? pflags += 'S' : pflags += '-';\n  if (emerald.showPsiBals) emerald.bals.i > 0 ? pflags += 'i' : pflags += '-';\n  if (emerald.showArmBals) emerald.bals.la ? pflags += 'l' : pflags += '-';\n  if (emerald.showArmBals) emerald.bals.ra ? pflags += 'r' : pflags += '-';\n  if (emerald.showLegBals) emerald.bals.ll ? pflags += 'L' : pflags += '-';\n  if (emerald.showLegBals) emerald.bals.rl ? pflags += 'R' : pflags += '-';\n  if (emerald.vitals.kafe) pflags += 'k';\n  if (emerald.vitals.deaf) pflags += 'd';\n  if (emerald.vitals.blind) pflags += 'b';\n  if (emerald.vitals.prone) pflags += 'p';\n  if (emerald.cloaked) pflags += '<>'\n  emerald.note.build(`${emerald.bals.B ? 'B' : '-'}`,(emerald.bals.onbal && (emerald.plugins.affs ? emerald.affs.canAct() : true)) ? emerald.beastFollowing ? 'goldenrod' : 'red' : 'grey');\n  emerald.note.build(pflags+'- ',(emerald.bals.onbal && (emerald.plugins.affs ? emerald.affs.canAct() : true)) ? 'goldenrod' : 'grey','');\n  prompt.drawTags();\n  for (const d of ['hp','mp','ego','pow','xp','essence','awp','eflow']) {\n    let diff = emerald.vitals['diff'+d]\n    if (diff != 0) {\n      if (diff > 0) {\n        emerald.note.build(' [',emerald.configs.ui_white,'',`+${diff}${d=='pow'?'p':d=='essence'?'ess':d}`,emerald.configs.ui_green,'',']',emerald.configs.ui_white,'');\n      } else {\n        emerald.note.build(' [',emerald.configs.ui_white,'',`${diff}${d=='pow'?'p':d=='essence'?'ess':d}`,emerald.configs.ui_red,'',']',emerald.configs.ui_white,'');\n      }\n    }\n  }\n  //emerald.note.build('\\n',emerald.configs.ui_white,'');\n  emerald.note.display();\n}\n\n\n\nprompt.drawTags = () => {\n  emerald.paused && emerald.note.build('[PAUSED]','silver','seagreen',' ','silver','');\n  emerald.plugins.bash && emerald.bash.active && emerald.note.build('[BASHING]','blue','seagreen',' ',emerald.configs.ui_white,'');\n  if (emerald.plugins.affs) {\n    emerald.affs.has('aeon') && emerald.note.build('[AEON]','white','blue',' ',emerald.configs.ui_white,'');\n    emerald.affs.has('stun') && emerald.note.build('[STUN]','black','yellow',' ',emerald.configs.ui_white,'');\n    emerald.affs.has('blackout') && emerald.note.build('[BLACKOUT]','black','white',' ',emerald.configs.ui_white,'');\n    \n    if (emerald.affs.hasWounds()) { \n      emerald.note.build('[WS]:','white','red',' ',emerald.configs.ui_white,'');\n      if (emerald.affs.hasHeadWounds()) {\n        let str = 'HH';\n        if (emerald.affs.has('damagedskull')) str = '>HH<';\n        else if (emerald.affs.has('damagedthroat')) str = '-HH-';\n        emerald.note.build(str,emerald.affs.checkWoundLevel('head'),'',' ',emerald.configs.ui_white,'');\n      }\n      if (emerald.affs.hasChestWounds()) {\n        let str = 'CC';\n        if (emerald.affs.has('collapsedlung')) str = '>CC<';\n        else if (emerald.affs.has('crushedchest')) str = '-CC-';\n        emerald.note.build(str,emerald.affs.checkWoundLevel('chest'),'',' ',emerald.configs.ui_white,'');\n      }\n      if (emerald.affs.hasGutWounds()) {\n        let str = 'GG';\n        if (emerald.affs.has('internalbleeding')) str = '>GG<';\n        else if (emerald.affs.has('damagedorgans')) str = '-GG-';\n        emerald.note.build(str,emerald.affs.checkWoundLevel('gut'),'',' ',emerald.configs.ui_white,'');\n      }\n      if (emerald.affs.hasLeftArmWounds()) {\n        let str = 'LA';\n        if (emerald.affs.has('mutilatedleftarm')) str = '>LA<';\n        else if (emerald.affs.has('damagedleftarm')) str = '-LA-';\n        emerald.note.build(str,emerald.affs.checkWoundLevel('leftarm'),'',' ',emerald.configs.ui_white,'');\n      }\n      if (emerald.affs.hasRightArmWounds()) {\n        let str = 'RA';\n        if (emerald.affs.has('mutilatedrightarm')) str = '>RA<';\n        else if (emerald.affs.has('damagedrightarm')) str = '-RA-';\n        emerald.note.build(str,emerald.affs.checkWoundLevel('rightarm'),'',' ',emerald.configs.ui_white,'');\n      }\n      if (emerald.affs.hasLeftLegWounds()) {\n        let str = 'LL';\n        if (emerald.affs.has('mutilatedleftleg')) str = '>LL<';\n        else if (emerald.affs.has('damagedleftleg')) str = '-LL-';\n        emerald.note.build(str,emerald.affs.checkWoundLevel('leftleg'),'',' ',emerald.configs.ui_white,'');\n      }\n      if (emerald.affs.hasRightLegWounds()) {\n        let str = 'RL';\n        if (emerald.affs.has('mutilatedrightleg')) str = '>RL<';\n        else if (emerald.affs.has('damagedrightleg')) str = '-RL-';\n        emerald.note.build(str,emerald.affs.checkWoundLevel('rightleg'),'',' ',emerald.configs.ui_white,'');\n      }\n    }\n    if (emerald.affs.hasDeathMark()) {\n      emerald.note.build(`[DEATHMARK]:${emerald.affs.has('deathmark')}/5`,'black','saddlebrown',' ',emerald.configs.ui_white,'');\n    }\n  }\n}"},{"type":"function","name":"emeraldCoreInitQueue","enabled":true,"code":"let emerald = client.emerald;\n\nvar queue = emerald.queue = {q:[],'f':[],'sub':[],'super':[],'id':[],repeat:false};\n\nqueue.add = (cmd, pool = false) => {\n  if (pool) {\n    emerald.debugmsg(`Action queued in pool ${pool} - ${cmd}`);\n    queue[pool].push(cmd);\n  } else {\n    emerald.debugmsg(`Action queued - ${cmd}`);\n    queue.q.push(cmd);\n  }\n}\n\nqueue.run = () => {\n  if (emerald.paused || !(queue.q.length > 0 || queue.f.length > 0 || queue.sub.length > 0 || queue.super.length > 0 || queue.id.length > 0)) return;\n  if (emerald.plugins.affs && emerald.affs.has('aeon')) return;\n  //Roadmap: beastbal and mounted status\n  let cmds = [];\n  if (emerald.bals.onbal) {\n    /*while (queue.f.length > 0) {\n      cmds.push(queue.f.shift());\n    }*/\n    if (queue.sub.length > 0 && !emerald.flags.get('trypsisub')) {\n      cmds.push(`psi sub ${queue.sub.shift()}`);\n      emerald.flags.set('trypsisub',true,250);\n    }\n    if (queue.super.length > 0 && !emerald.flags.get('trypsisuper')) {\n      cmds.push(`psi super ${queue.super.shift()}`);\n      emerald.flags.set('trypsisuper',true,250);\n    }\n    if (queue.id.length > 0 && !emerald.flags.get('trypsiid')) {\n      cmds.push(`psi id ${queue.id.shift()}`);\n      emerald.flags.set('trypsiid',true,250);\n    }\n    if (queue.q.length > 0 && !['trypsisub','tryosisuper','trypsiid','tryqueue'].some(f => emerald.flags.get(f))) {\n      let curCmd = queue.q.shift();\n      cmds.push(curCmd);\n      if (queue.repeat) queue.q.push(curCmd);\n      emerald.flags.set('tryqueue',true,250);\n    }\n    while (queue.f.length > 0) send_command(queue.f.shift());\n    while (cmds.length > 0) send_command(cmds.shift());\n  }\n}\n\nqueue.reset = () => {\n  queue.q = [];\n  queue.f = [];\n  queue.sub = [];\n  queue.super = [];\n  queue.id = [];\n  queue.repeat = false;\n  emerald.emnote('Action queues reset!');\n}"},{"type":"function","name":"emeraldCoreInitSkills","enabled":true,"code":"let emerald = client.emerald;\nlet skills = emerald.skills = {};\n\nskills.has = (skill, ab = undefined) => {\n  if (ab) {\n    return skills[skill] && skills[skill][ab];\n  } else {\n    return skills[skill];\n  }\n}\n\nlet allVars = Object.keys(client.variables().vars);\nfor (let v in allVars) {\n  if (allVars[v].includes('emerald_skills_')) {\n    let s = allVars[v].replace('emerald_skills_','');\n    skills[s] = v.split('|');\n  }\n}"},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"switch (args[1].toLowerCase().replace('stratus','')) {\n  case 'super':\n    client.emerald.superLocked = true;\n    break;\n  case 'sub':\n    client.emerald.subLocked = true;\n    break;\n  case 'id':\n    client.emerald.idLocked = true;\n    break;\n}"}],"text":"^You feel the (\\w+) channel has been fully locked\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"switch (args[1].toLowerCase().replace('stratus','')) {\n  case 'super':\n    client.emerald.superLocked = false;\n    break;\n  case 'sub':\n    client.emerald.subLocked = false;\n    break;\n  case 'id':\n    client.emerald.idLocked = false;\n    break;\n}"}],"text":"^You relax your mind and feel the (\\w+) channel opening again\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_core_psichannels","enabled":true,"actions":[{"type":"script","enabled":true,"script":"switch (args[1].toLowerCase().replace('stratus','')) {\n  case 'super':\n    client.emerald.superLocked = args[2]!=='Open';\n    client.emerald.bals.S = args[2]=='Open'\n    break;\n  case 'sub':\n    client.emerald.subLocked = args[2]!=='Open';\n    client.emerald.bals.s = args[2]=='Open'\n    break;\n  case 'id':\n    client.emerald.idLocked = args[2]!=='Open';\n    client.emerald.bals.i = args[2]=='Open'\n    break;\n}"}],"text":"^  (Substratus|Superstratus|Id)\\:\\s+(Open|Locked by \\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.bals.brew = false;"}],"text":"^Your blood surges as the .*? enters your system\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.bals.brew = true;"}],"text":"^You belch softly under your breath\\, ready to quaff another brew\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Commands","enabled":true,"items":[{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.paused = args[1] == 'pause';\nclient.emerald.emnote(`${args[1].charAt(0).toUpperCase()+args[1].slice(1)}d`);"}],"text":"^((?:un)?pause)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"function","enabled":true,"fn":"onInstall"}],"text":"^reset$","matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.configs.debug = args[1] == 'on';\nclient.emerald.emnote(`Debugging ${args[1]}`);"}],"text":"^debug (on|off)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"set_variable('target',args[1]);\nclient.emerald.emnote(`Targeting - ${args[1]}`);\nsend_command(`pursue ${args[1]}`);"}],"text":"^t\\s+(\\w+)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (!client.emerald.paused) {\n  send_command(`${get_variable('emerald_config_announce')} targeting ${args[1].toUpperCase()}${client.emerald.plugins['mapper'] ? ' at ' + client.emerald.mapper.currentRoom : ''}`);\n  send_command(`t ${args[1]}`);\n}"}],"text":"^a\\s+(.+?)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"args[2].split(',').forEach(a => {\n  client.emerald.queue.add(a.trim(),args[1]);\n})\nclient.emerald.queue.run();"}],"text":"^q(f|sub|super|id)?\\s+(.+?)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let queue = client.emerald.queue\nqueue.add(args[1]);\nqueue.repeat = true;\nqueue.run();\nclient.emerald.emnote(`Repeating action - ${args[1]}`);"}],"text":"^rpq\\s+(.+?)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.queue.reset();"}],"text":"^rq$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"group","name":"Config","enabled":true,"items":[{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"set_variable('emerald_config_announce',args[1]);\nclient.emerald.emnote(`Announcer command set to: ${args[1].toUpperCase()}`);"}],"text":"^cfg ann(?:ounce)? (.+?)$","matching":"regexp","whole_words":false,"case_sensitive":false,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.configs.brew = args[1];"}],"text":"^cfg brew (green|black|white|oolong|pale|amber|dark)$","matching":"regexp","whole_words":false,"case_sensitive":false,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let emerald = client.emerald;\nswitch (args[1]) {\n  case 'arm':\n    emerald.configs.armBals = args[2];\n    set_variable('emerald_configs_armbals', args[2]);\n    if (args[2] == 'off') emerald.showArmBals = false;\n    emerald.emnote(`Prompt arm balances - ${args[2]}`);\n    break;\n  case 'leg':\n    emerald.configs.legBals = args[2];\n    set_variable('emerald_configs_legbals', args[2]);\n    if (args[2] == 'off') emerald.showLegBals = false;\n    emerald.emnote(`Prompt leg balances - ${args[2]}`);\n    break;\n  case 'psi':\n    emerald.configs.psiBals = args[2];\n    set_variable('emerald_configs_psibals', args[2]);\n    if (args[2] == 'off') emerald.showPsiBals = false;\n    emerald.emnote(`Prompt psi balances - ${args[2]}`);\n    break;\n}"}],"text":"^cfg bals (arm|leg|psi) (on|off|auto)$","matching":"regexp","whole_words":false,"case_sensitive":false,"prefix_suffix":true}]}]},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.queue.reset();\nif (client.emerald.plugins.affs) client.emerald.affs.reset();\nclient.emerald.beastFollowing = false;"}],"text":"^You have been slain by","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"alias","name":"","enabled":true,"actions":[],"text":"^ehelp(.*?)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true}],"description":"Core module for Emerald"}