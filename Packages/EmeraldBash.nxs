{"type":"group","name":"EmeraldBash","enabled":true,"items":[{"type":"function","name":"initTargetList","enabled":true,"code":"let emerald = client.emerald;\n\nemerald.bash.targets = {\n\n  //Grimkeep\n  'a stonewrought sentinel':{alias: 'sentinel', threat:1},\n  'a misshapen koirakko':{alias: 'koirakko', threat: 2},\n  'a putrescent excoropox':{alias: 'excoropox', threat: 3},\n  'a ghostly battlecharger':{alias: 'battlecharger', threat:4},\n  'a spectral artificer':{alias: 'artificer', threat:5},\n\n  //Astral beasts\n  'a ravenous fesix': {alias:'fesix', threat: 1},\n  'a robed obesefessor': {alias:'obesefessor', threat: 1},\n  'an emaciated virgin': {alias:'virgin', threat: 1},\n  'a gargantuan red scorpion': {alias:'scorpion', threat: 1},\n  'a floating urn': {alias:'urn', threat: 1},\n  'a hulking three-horned bull': {alias:'bull', threat: 1},\n  'a two-headed eagle': {alias:'eagle', threat: 1},\n  'a bloated parasite': {alias:'parasite', threat: 1},\n  'a two-headed abhorrence': {alias:'abhorrence', threat: 1},\n  'a sadistic mitran': {alias:'mitran', threat: 1},\n  'a stainless steel goat': {alias:'goat', threat: 1},\n  'a monstrous lobstrosity': {alias:'lobstrosity', threat: 1},\n\n  //Domoth beasts\n  'a king of justice': {alias:'justice', threat:1},\n  'a lost soul of death': {alias:'death', threat:1},\n  'a radiant defender of life': {alias:'life', threat:1},\n  'a willowy fae of nature': {alias:'nature', threat:1},\n  'a manifested paradox of knowledge': {alias:'knowledge', threat:1},\n  'a champion of war': {alias:'war', threat:1},\n  'a glowing sphere of harmony': {alias:'harmony', threat:1},\n  'a two-headed hamster of chaos': {alias:'chaos', threat:1},\n  'an alluring siren of beauty': {alias:'beauty', threat:1},\n\n  //Elemental beasts\n  //Air\n  'an aerial stalker': {alias:'stalker', threat: 0},\n  'a curlicued stormeater': {alias:'stormeater', threat: 0},\n  'a cloud carrion': {alias:'carrion', threat: 0},\n\n  //Water\n  'a serpentine starsucker': {alias:'starsucker',threat: 0},\n  'a dream leech': {alias:'leech', threat: 0},\n\n  //Fire\n  'a flame hog': {alias:'hog', threat: 0},\n  'a cinder crawler': {alias:'crawler', threat: 0},\n  'a fire mantis': {alias:'mantis', threat: 0},\n\n  //Earth\n  'a morbidly tainted grub': {alias:'grub', threat: 0},\n  'a huge lindwyrm': {alias:'lindwyrm', threat: 0},\n  'a decaying gargoyle': {alias:'gargoyle', threat: 0},\n  'a slavering stoneghast': {alias:'stoneghast', threat: 1},\n\n  //Etherwilde\n  'an ethereal opossum': {alias:'opossum', threat: 0},\n  'an ethereal white peacock': {alias:'peacock', threat: 0},\n  'an ethereal stag': {alias:'stag', threat:0},\n\n  //Etherglom\n  'a shadow spider': {alias:'spider', threat: 0},\n  'a shadow hawk': {alias:'hawk', threat:0},\n  'a shadow centipede': {alias:'centipede', threat:0},\n\n  //Mount Dio\n  'a snow white skara': {alias:'skara', threat: 0},\n  'an ice blue skara': {alias:'skara', threat: 0},\n  'a crimson-scaled skara': {alias:'skara', threat: 1},\n  'a black-scaled skara': {alias:'skara', threat:0},\n  'a beastial garul': {alias:'garul', threat: 2},\n  'a massive ice worm': {alias:'worm', threat: 1},\n  'an enormous white garul': {alias:'garul', threat:3},\n  'Rawari, a wiry garul': {alias:'garul', threat: 3},\n\n  //Undervault\n  'a hard-shelled, many-legged cave-fisher': {alias:'fisher', threat: 1},\n  'an algae-like phycomid': {alias:'phycomid', threat: 0},\n  'a large, hairy solifugid': {alias:'solifugid', threat:0},\n  'a giant centipede': {alias:'centipede', threat:0},\n  'an inferno beetle': {alias:'beetle', threat:0},\n  'a deepstone rockeater': {alias:'rockeater', threat:0},\n  'a land urchin': {alias:'urchin', threat:0},\n\n  //Cankermore\n  'a vicious allisaur': {alias:'allisaur', threat: 1},\n\n  //The Facility\n  'a giant violet slug': {alias:'slug', threat: 0},\n  'a giant yellow slug': {alias:'slug', threat: 0},\n  'a giant green slug': {alias:'slug', threat: 0},\n  'a giant red slug': {alias:'slug', threat: 0},\n  'a giant blue slug': {alias:'slug', threat: 0},\n\n  //Workshop of Xion\n  'a crystal grodak': {alias:'grodak', threat: 0},\n  'an aetherway hynx': {alias:'hynx', threat: 0},\n  'a shadow mordrath': {alias:'mordrath',threat:1},\n\n  //Great Illithoid Prison\n  'a slithering inner worm': {alias:'worm',threat:1},\n  'an illithoid reaper': {alias:'reaper',threat:1},\n  'an illithoid ravager': {alias:'ravager',threat:1},\n  'an illithoid scavenger': {alias:'scavenger',threat:1},\n  'an illithoid marauder': {alias:'marauder',threat:1},\n  'a bloated illithoid breeder': {alias:'breeder',threat:1},\n  'a gruesome illithoid chef': {alias:'chef',threat:1},\n  'an illithoid sapper': {alias:'sapper',threat:1},\n  'a Grand Illithoid Cenobite': {alias:'cenobite',threat:2},\n  'High Priest Yishughom': {alias:'Yishughom',threat:2},\n\n  //Pandaemonium\n  'a contorted minotaur':{alias:'astralbeast',threat:4},\n  'a colossal blistering scorpion':{alias:'astralbeast',threat:4},\n  'a six-legged vulture':{alias:'astralbeast',threat:4},\n  'a broken living amphora':{alias:'astralbeast',threat:4},\n  'a hulking abomination':{alias:'astralbeast',threat:4},\n  'a nine-armed crabstrosity':{alias:'astralbeast',threat:4},\n  'a malevolent adjudicator':{alias:'astralbeast',threat:4},\n  'a leering bakeneko':{alias:'astralbeast',threat:4},\n  'an iron wool three-horned ram':{alias:'astralbeast',threat:4},\n  'an engorged anisakis':{alias:'astralbeast',threat:4},\n  'a wretched damsel':{alias:'astralbeast',threat:4},\n  'a decaying shogothessor':{alias:'astralbeast',threat:4},\n\n  'the Baron of Cancer':{alias:'baron',threat:1},\n  'a Steward of Pincers':{alias:'steward',threat:2},\n  'a Jester of Many Legs':{alias:'jester',threat:3},\n\n  //Project Eternity\n  'a mutated, undead cave-fisher':{alias:'fisher',threat:1},\n  \n}\n\nemerald.emnote(`${Object.keys(emerald.bash.targets).length} bash targets loaded.`,'Bash');"},{"type":"function","name":"onGMCP","enabled":true,"code":"if (args.gmcp_method == \"Char.Items.List\") {\n  let bash = client.emerald.bash\n  if (bash.active) {\n    bash.queue = [];\n    bash.noTargetCount = 0;\n    bash.targetalias = '';\n    bash.targetid = '';\n    args.gmcp_args.items.forEach(item => {\n      //If target is on the list\n      if (Object.keys(bash.targets).includes(item.name) && !item.attrib.includes('t')) {\n        client.emerald.debugmsg(`target ${item.id} not queued`);\n        //Push into queue at defined priority.\n        bash.queue.push({\n          'id': item.id, //target is attacked by id\n          'alias': bash.targets[item.name].alias, //to watch for kills/shield\n          'threat': bash.targets[item.name].threat //aggro priority; higher value = target sooner\n        });\n        client.emerald.debugmsg(JSON.stringify(bash.queue));\n      }\n    });\n    bash.retarget();\n    bash.try();\n  }\n}\n\nif (args.gmcp_method == \"Char.Items.Add\" && args.gmcp_args.location == \"room\") {\n  let bash = client.emerald.bash;\n  client.emerald.debugmsg(JSON.stringify(args));\n  if (bash.active) {\n    let item = args.gmcp_args.item\n    if (bash.targets[item.name] && !bash.queue[item.id]) {\n      bash.queue.push({\n        'id': item.id,\n        'alias': bash.targets[item.name].alias,\n        'priority': bash.targets[item.name].priority\n      });\n    }\n    if (bash.mode == 'wait') bash.retarget();\n  }\n}\n\nif (client.emerald.bash.active && (args.gmcp_method == \"Char.Items.Remove\" || args.gmcp_method == 'Char.Items.Update') && args.gmcp_args.location == \"room\") {\n  client.emerald.bash.remove(args.gmcp_args.item.id);\n}\n"},{"type":"function","name":"onInstall","enabled":true,"code":"let emerald = client.emerald;\nlet bash = emerald.bash = {\n  name: 'EmeraldBash',\n  version: '0.1.0',\n};\nset_variable('emerald_bash_version', bash.version);\n\nbash.reset = () => {\n  bash.active = false;\n  bash.mode = 'none';\n  bash.queue = [];\n  bash.noTargetCount = 0;\n  bash.targetalias = '';\n  bash.targetid = '';\n}\n\n\nbash.try = () => {\n  if (!emerald.flags.get('tryingBash')) {\n    if (bash.queue.length > 0){\n      let cmd = '';\n      emerald.flags.get('targetshielded') \n        ? cmd = get_variable('emerald_bash_raze') == 'rune' \n          ? get_variable('emerald_bash_attack') \n          : get_variable('emerald_bash_raze') \n        : cmd = get_variable('emerald_bash_attack');\n      emerald.debugmsg(`attempting bash command: ${cmd}`);\n      if (emerald.bals.onbal) {\n        emerald.flags.set('tryingBash',true,250);\n        if (get_variable('emerald_bash_beastatk')=='true' && emerald.bals.B) emerald.queue.add(`beast order attack ${bash.targetalias + bash.targetid}`,true);\n        send_command(cmd.replace('@',bash.targetalias).replace('#',bash.targetid));\n      } \n    } else if (emerald.flags.get('gettingGMCP')) {\n      setTimeout(() => {bash.try()}, 300);\n    } else if (bash.mode == 'room') {\n      emerald.emnote('No targets found.','Bash');\n      bash.active = false;\n    } else if (bash.noTargetCount >= 2) {\n      bash.retarget();\n    }\n  }\n}\nbash.retarget = () => {\n  if (bash.queue.length > 0) {\n    //start scanning queue at 0\n    emerald.emnote(`${bash.queue.length} target${bash.queue.length > 1 ? 's' : ''} remaining.`, 'Bash');\n    let targetIndex = 0\n    if(bash.queue.length > 1) {\n      let currentThreat = bash.queue[targetIndex].threat;\n      for (let t in bash.queue) {\n        //If any target in the queue has a higher threat, that resets the bar.\n        if (bash.queue[t].threat > currentThreat) {\n          targetIndex = t;\n          currentThreat = bash.queue[t].threat;\n        }\n      } //next t\n    }\n    bash.targetid = bash.queue[targetIndex].id;\n    bash.targetalias = bash.queue[targetIndex].alias;\n    bash.try();\n  } else {\n    if (bash.mode != 'wait') bash.active = false;\n  }\n}\n\nbash.remove = (id) => {\n  let bash = client.emerald.bash;\n  if (bash.active) {\n    bash.queue = bash.queue.filter(i => i.id != id);\n    if (bash.queue.length == 0 && bash.mode != 'wait') {\n      client.emerald.emnote('Room cleared of targets.','Bash');\n      bash.active = false;\n    } else {\n      bash.retarget();\n    }\n  }\n}\n\nbash.onPrompt = () => {\n  if (bash.active) bash.try();\n}\n\nbash.reset();\nemerald.plugins['bash'] = bash;\nrun_function('initTargetList','','EmeraldBash');\nclient.emerald.emnote(`${bash.name} v${bash.version} initialised.`);"},{"type":"function","name":"onUninstall","enabled":true,"code":"client.emerald.bash = {};"},{"type":"trigger","name":"emerald_bash_essencedrop","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.emerald.queue.f.push('g essence');"}],"text":"^(?:As .*? perishes\\, several droplets of water coalesce into a bit of light essence\\.|.*? shrieks as it perishes\\, its dying cry forming into a bit of cloud essence\\.|A bit of fiery essence pours out of .*?\\'s mouth with its dying breath\\.|A bit of dark essence tumbles out of .*?\\.|A bit of silvery essence tumbles out of .*?\\.|A bit of shadowy essence tumbles out of .*?\\.)$","matching":"regexp","whole_words":true,"case_sensitive":false},{"type":"trigger","name":"emerald_bash_golddrop","enabled":true,"actions":[{"type":"command","enabled":true,"command":"qf g gold","prefix_suffix":false}],"text":"^You have slain (?:.*?)\\. .*? sovereigns .*? corpse\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_bash_shieldup","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1].includes(get_variable('target'))) {\n  client.emerald.emnote('TARGET SHIELDED!!');\n  client.emerald.flags.set('targetshielded',true,3000);\n}"}],"text":"^(?:A dizzying beam of energy strikes you as your attack rebounds off |Eyes glowing red\\, )?(.*?)(?: mutters and traces a cobalt blue pentagram in the air that remains hovering before [Hh](?:im|er)|\\'s shield| bellows and a shield of protection flickers into view around [Hh](?:is|er) form)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_bash_shielddown","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1].includes(get_variable('target'))) {\n  client.emerald.flags.clear('targetshielded');\n  client.emerald.emnote('Target shield removed!!')\n}"}],"text":"^(?:You raze |.+? \\'s attack passes through the shield of)?(.*?)(?:\\, the protective sphere dissolving into thin air|\\'s action causes the nearly invisible magical shield around him to fade away| magical shield with a clawed fist)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_bash_notarget","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (client.emerald.bash.active){\n  client.emerald.bash.noTargetCount += 1;\n}\n//client.emerald.flags.set('gagPrompt',true,100);"}],"text":"^(?:You cannot see that being here\\.|Ahh\\, I am truly sorry\\, but I do not see anyone by that name here\\.|I do not recognize anything called that here\\.|You detect nothing here by that name\\.|Nothing can be seen here by that name\\.)$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let emerald = client.emerald\nlet tar = get_variable('emerald_bash_target')\nlet taralias = get_variable('emerald_bash_targetalias');\nif (emerald.bash.active && args[1].includes(taralias)) {\n  emerald.debugmsg(`Removing target ${tar}`)\n  //emerald.bash.remove(tar);\n}"}],"text":"^You have slain (.+?)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"emerald_bash_crits","enabled":true,"actions":[{"type":"gag","enabled":true}],"text":"^(?:You|\\w+) (?:have|has) scored an?(?: OBLITERATING| CRUSHING| WORLD-SHATTERING| ANNIHILATINGLY POWERFUL)? CRITICAL (?:HIT|hit)[\\.\\!]+$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"/*let bash = client.emerald.bash\n    bash.active = true;\n    bash.mode = 'room';\n    bash.noTargetCount = 0;\n    send_GMCP('Char.Items.Room','');\n    client.emerald.emnote('Bashing all room targets.','Bash');*/\n\nsend_command('br',false)"}],"text":"^A fountain of domothean energy erupts from .*?","matching":"regexp","whole_words":false,"case_sensitive":false},{"type":"group","name":"Commands","enabled":true,"items":[{"type":"alias","name":"","enabled":true,"actions":[{"type":"function","enabled":true,"fn":"initTargetList"}],"text":"^cfg bash reload$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"emerald_bash_configatk","enabled":true,"actions":[{"type":"script","enabled":true,"script":"switch (args[1]) {\n  case 'attack':\n    set_variable('emerald_bash_attack',args[2]);\n    client.emerald.emnote(`Bashing attack set to ${args[2]}.`);\n    break;\n  case 'raze':\n    set_variable('emerald_bash_raze',args[2]);\n    switch (args[2]) {\n      case 'none':\n      case 'wait':\n        client.emerald.emnote('Waiting for shields to drop while bashing.');\n        break;\n      case 'rune':\n        client.emerald.emnote('Assuming Rune of Razing is equipped.');\n        break;\n      default:\n        client.emerald.emnote(`Bashing raze attack set to ${args[2]}.`);\n        break;\n    }\n    break;\n  case 'beast':\n    set_variable('emerald_bash_beastatk',args[2]=='on');\n    client.emerald.emnote(`${args[2]=='on'?'U':'Not u'}sing beast attacks.`,'Bash');\n}"}],"text":"^cfg bash (attack|raze|beast) (.+?)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"emerald_bash_start","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let bash = client.emerald.bash\nswitch (args[1]) {\n  case 'a':\n    //bash area start\n    break;\n  case 'r':\n    bash.active = true;\n    bash.mode = 'room';\n    bash.noTargetCount = 0;\n    client.emerald.flags.set('gettingGMCP',true,250);\n    send_GMCP('Char.Items.Room','');\n    client.emerald.emnote('Bashing all room targets.','Bash');\n    break;\n  case 's':\n    bash.active = false;\n    bash.mode = 'none';\n    bash.queue = [];\n    client.emerald.emnote('Bashing queue cleared.','Bash');\n    break;\n  case 'w':\n    bash.active = true;\n    bash.mode = 'wait';\n    bash.queue=[];\n    send_GMCP('Char.Items.Room','');\n    client.emerald.emnote('Awaiting targets at location.','Bash');\n    break;\n}"}],"text":"^b(a|r|s|w)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true}]}],"description":"Hunting Triggers"}